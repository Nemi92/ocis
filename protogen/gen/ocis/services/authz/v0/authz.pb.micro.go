// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ocis/services/authz/v0/authz.proto

package v0

import (
	fmt "fmt"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/owncloud/ocis/v2/protogen/gen/ocis/messages/authz/v0"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthzProvider service

func NewAuthzProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "AuthzProvider.Allowed",
			Path:    []string{"/api/v0/authz/allowed"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for AuthzProvider service

type AuthzProviderService interface {
	Allowed(ctx context.Context, in *AllowedRequest, opts ...client.CallOption) (*AllowedResponse, error)
}

type authzProviderService struct {
	c    client.Client
	name string
}

func NewAuthzProviderService(name string, c client.Client) AuthzProviderService {
	return &authzProviderService{
		c:    c,
		name: name,
	}
}

func (c *authzProviderService) Allowed(ctx context.Context, in *AllowedRequest, opts ...client.CallOption) (*AllowedResponse, error) {
	req := c.c.NewRequest(c.name, "AuthzProvider.Allowed", in)
	out := new(AllowedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthzProvider service

type AuthzProviderHandler interface {
	Allowed(context.Context, *AllowedRequest, *AllowedResponse) error
}

func RegisterAuthzProviderHandler(s server.Server, hdlr AuthzProviderHandler, opts ...server.HandlerOption) error {
	type authzProvider interface {
		Allowed(ctx context.Context, in *AllowedRequest, out *AllowedResponse) error
	}
	type AuthzProvider struct {
		authzProvider
	}
	h := &authzProviderHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AuthzProvider.Allowed",
		Path:    []string{"/api/v0/authz/allowed"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&AuthzProvider{h}, opts...))
}

type authzProviderHandler struct {
	AuthzProviderHandler
}

func (h *authzProviderHandler) Allowed(ctx context.Context, in *AllowedRequest, out *AllowedResponse) error {
	return h.AuthzProviderHandler.Allowed(ctx, in, out)
}
