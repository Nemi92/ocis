// Code generated by protoc-gen-microweb. DO NOT EDIT.
// source: v0.proto

package v0

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
	"github.com/golang/protobuf/jsonpb"
	merrors "go-micro.dev/v4/errors"
)

type webAuthzProviderHandler struct {
	r chi.Router
	h AuthzProviderHandler
}

func (h *webAuthzProviderHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	h.r.ServeHTTP(w, r)
}

func (h *webAuthzProviderHandler) Allowed(w http.ResponseWriter, r *http.Request) {
	req := &AllowedRequest{}
	resp := &AllowedResponse{}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusPreconditionFailed)
		return
	}

	if err := h.h.Allowed(
		r.Context(),
		req,
		resp,
	); err != nil {
		if merr, ok := merrors.As(err); ok && merr.Code == http.StatusNotFound {
			http.Error(w, err.Error(), http.StatusNotFound)
		} else {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
		return
	}

	render.Status(r, http.StatusCreated)
	render.JSON(w, r, resp)
}

func RegisterAuthzProviderWeb(r chi.Router, i AuthzProviderHandler, middlewares ...func(http.Handler) http.Handler) {
	handler := &webAuthzProviderHandler{
		r: r,
		h: i,
	}

	r.MethodFunc("POST", "/api/v0/authz/allowed", handler.Allowed)
}

// AllowedRequestJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of AllowedRequest. This struct is safe to replace or modify but
// should not be done so concurrently.
var AllowedRequestJSONMarshaler = new(jsonpb.Marshaler)

// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *AllowedRequest) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}

	buf := &bytes.Buffer{}

	if err := AllowedRequestJSONMarshaler.Marshal(buf, m); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _ json.Marshaler = (*AllowedRequest)(nil)

// AllowedRequestJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of AllowedRequest. This struct is safe to replace or modify but
// should not be done so concurrently.
var AllowedRequestJSONUnmarshaler = new(jsonpb.Unmarshaler)

// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *AllowedRequest) UnmarshalJSON(b []byte) error {
	return AllowedRequestJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}

var _ json.Unmarshaler = (*AllowedRequest)(nil)

// AllowedResponseJSONMarshaler describes the default jsonpb.Marshaler used by all
// instances of AllowedResponse. This struct is safe to replace or modify but
// should not be done so concurrently.
var AllowedResponseJSONMarshaler = new(jsonpb.Marshaler)

// MarshalJSON satisfies the encoding/json Marshaler interface. This method
// uses the more correct jsonpb package to correctly marshal the message.
func (m *AllowedResponse) MarshalJSON() ([]byte, error) {
	if m == nil {
		return json.Marshal(nil)
	}

	buf := &bytes.Buffer{}

	if err := AllowedResponseJSONMarshaler.Marshal(buf, m); err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var _ json.Marshaler = (*AllowedResponse)(nil)

// AllowedResponseJSONUnmarshaler describes the default jsonpb.Unmarshaler used by all
// instances of AllowedResponse. This struct is safe to replace or modify but
// should not be done so concurrently.
var AllowedResponseJSONUnmarshaler = new(jsonpb.Unmarshaler)

// UnmarshalJSON satisfies the encoding/json Unmarshaler interface. This method
// uses the more correct jsonpb package to correctly unmarshal the message.
func (m *AllowedResponse) UnmarshalJSON(b []byte) error {
	return AllowedResponseJSONUnmarshaler.Unmarshal(bytes.NewReader(b), m)
}

var _ json.Unmarshaler = (*AllowedResponse)(nil)
